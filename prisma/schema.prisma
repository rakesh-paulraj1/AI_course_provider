// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String
  role         UserRole   @default(consumer)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime  @updatedAt
  authoredCourses CourseAuthor[]
  createdModules ModuleContent[] 
  @@map("users")
}
model Course {
  id            String     @id @default(uuid())
  title         String
  description   String
  slug          String     @unique
  status        CourseStatus @default(draft)
  coverImageUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  authors       CourseAuthor[]
  modules       Module[]
  @@map("courses")
}
model CourseAuthor {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      CourseAuthorRole @default(primary)
  joinedAt  DateTime @default(now())
  @@unique([courseId, userId])
  @@map("course_authors")
}
model Module {
  id          String     @id @default(uuid())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  title       String
  description String
  position    Int       
  isLocked    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contents    ModuleContent[]
  @@map("modules")
}
model ModuleContent {
  id          String      @id @default(uuid())
  module      Module      @relation(fields: [moduleId], references: [id])
  moduleId    String
  title       String
  content     String      
  contentType ContentType
  position    Int         
  duration    Int?        
  creator     User        @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  aiGenerated Boolean     @default(false)
  @@map("module_contents")
}
enum UserRole {
  admin
  consumer
  author
}
enum CourseStatus {
  draft
  published
  archived
}
enum CourseAuthorRole {
  primary
  contributor
}
enum ContentType {
  text
  video
  quiz
  document
  interactive
}
